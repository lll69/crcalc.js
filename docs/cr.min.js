/*
 * crcalc.js
 * Copyright 2025 lll69, Licensed under the Apache License, Version 2.0
 * Copyright (C) 2016 The Android Open Source Project, Licensed under the Apache License, Version 2.0
 * Copyright (C) 2015 The Android Open Source Project, Licensed under the Apache License, Version 2.0
 * Copyright (c) 1999, Silicon Graphics, Inc.
 * Copyright (c) 2001-2004, Hewlett-Packard Development Company, L.P.
 */
class ExceptionBase extends Error{constructor(e,t){super(e+(t?": "+t:t))}}class PrecisionOverflowException extends ExceptionBase{constructor(e){super("PrecisionOverflowException",e)}}class ArithmeticException extends ExceptionBase{constructor(e){super("ArithmeticException",e)}}class NumberFormatException extends ExceptionBase{constructor(e){super("NumberFormatException",e)}}class ZeroDivisionException extends ArithmeticException{constructor(){super("Division by zero")}}class AssertionError extends ExceptionBase{constructor(e){super("AssertionError",e)}}function gcd_n(e,t){let n;for(e=e<0n?-e:e,t=t<0n?-t:t;0n!==t;)n=t,t=e%t,e=n;return e}function abs_n(e){return e<0n?-e:e}function compare_n(e,t){return e<t?-1:e===t?0:1}function signum_n(e){return e<0n?-1:0n===e?0:1}function bitLength_n(e){if(0n===e)return 0;e<0n&&(e=-1n-e);let t=0,n=e>>32n;for(;0n!==n;)t+=32,n=(e=n)>>32n;let i,r=0n,a=32n;for(;r<a;)i=r+a+1n>>1n,e>>i===0n?a=i-1n:r=i;return t+Number(r)+1}class CR{constructor(){this.min_prec=0,this.appr_valid=!1}static bound_log2(e){let t=Math.abs(e);return 0^Math.ceil(Math.log(t+1)/Math.LN2)}static check_prec(e){if(e>>28^e>>29)throw new PrecisionOverflowException}static valueOfN(e){return new int_CR(e)}static shift(e,t){return 0n===t?e:t<0n?e>>-t:e<<t}static scale(e,t){if(t>=0n)return e<<t;return CR.shift(e,t+1n)+1n>>1n}get_appr(e){if(CR.check_prec(e),this.appr_valid&&e>=this.min_prec)return CR.scale(this.max_appr,BigInt(this.min_prec-e));{let t=this.approximate(e);return this.min_prec=e,this.max_appr=t,this.appr_valid=!0,t}}known_msd(){let e;return e=this.max_appr>=0n?bitLength_n(this.max_appr):bitLength_n(-this.max_appr),this.min_prec+e-1}msd(e){return(!this.appr_valid||this.max_appr<=1n&&this.max_appr>=-1n)&&(this.get_appr(e-1),abs_n(this.max_appr)<=1n)?-2147483648:this.known_msd()}iter_msd(e){let t,n=0;for(;n>e+30;n=(3*n>>1)-16){if(t=this.msd(n),-2147483648!==t)return t;CR.check_prec(n)}return this.msd(e)}msd_get(){return this.iter_msd(-2147483648)}static zeroes(e){let t="";for(let n=0;n<e;++n)t+="0";return t}simple_ln(){return new prescaled_ln_CR(this.subtract(CR.ONE))}static atan_reciprocal(e){return new integral_atan_CR(e)}compareToRA(e,t,n){let i=this.iter_msd(n),r=e.iter_msd(i>n?i:n),a=r>i?r:i;if(-2147483648===a)return 0;CR.check_prec(t);let l=a+t,s=l>n?l:n;return this.compareToA(e,s)}compareToA(e,t){let n=t-1,i=this.get_appr(n),r=e.get_appr(n);return compare_n(i,r+1n)>0?1:compare_n(i,r-1n)<0?-1:0}compareTo(e){for(let t=-20;;t*=2){CR.check_prec(t);let n=this.compareToA(e,t);if(0!==n)return n}}signumA(e){if(this.appr_valid){let e=signum_n(this.max_appr);if(0!==e)return e}let t=e-1;return signum_n(this.get_appr(t))}signum(){for(let e=-20;;e*=2){CR.check_prec(e);let t=this.signumA(e);if(0!==t)return t}}static valueOfS(e,t){if(void 0===t&&(t=10),2!==t&&8!==t&&10!==t&&16!==t)throw new NumberFormatException("Radix: "+t);let n,i,r=e.length,a=0;for(;" "===e.charAt(a);)++a;for(;" "===e.charAt(r-1);)--r;n=e.indexOf(".",a),-1===n?(n=r,i=""):i=e.substring(n+1,r);let l,s=e.substring(a,n);switch(t){case 2:l=BigInt("0b"+s+i);break;case 8:l=BigInt("0o"+s+i);break;case 10:l=BigInt(s+i);break;case 16:l=BigInt("0x"+s+i)}let o=BigInt(t)**BigInt(i.length);return CR.valueOfN(l).divide(CR.valueOfN(o))}toStringR(e,t){let n;if(16===t)n=this.shiftLeft(4*e);else{let i=BigInt(t)**BigInt(e);n=this.multiply(new int_CR(i))}let i,r=n.get_appr(0),a=abs_n(r).toString(t);if(0===e)i=a;else{let t=a.length;if(t<=e){a=CR.zeroes(e+1-t)+a,t=e+1}i=a.substring(0,t-e)+"."+a.substring(t-e)}return r<0n&&(i="-"+i),i}toStringD(e){return this.toStringR(e,10)}toString(){return this.toStringD(10)}BigIntegerValue(){return this.get_appr(0)}doubleValue(){let e=this.iter_msd(-1080);if(-2147483648===e)return 0;let t=e-60,n=Number(this.get_appr(t)),i=t<-1e3,r=new ArrayBuffer(8),a=new DataView(r);a.setFloat64(0,n);let l=a.getBigInt64(0),s=BigInt(i?t+96:t);if((l>>52n&0x7ffn)+s>=2047)return n<0?-1/0:1/0;l+=s<<52n,a.setBigInt64(0,l);let o=a.getFloat64(0);if(i){const e=Number(1n<<48n);return o/e/e}return o}add(e){return new add_CR(this,e)}shiftLeft(e){return CR.check_prec(e),new shifted_CR(this,e)}shiftRight(e){return CR.check_prec(e),new shifted_CR(this,-e)}assumeInt(){return new assumed_int_CR(this)}negate(){return new neg_CR(this)}subtract(e){return new add_CR(this,e.negate())}multiply(e){return new mult_CR(this,e)}inverse(){return new inv_CR(this)}divide(e){return new mult_CR(this,e.inverse())}select(e,t){return new select_CR(this,e,t)}max(e){return this.subtract(e).select(e,this)}min(e){return this.subtract(e).select(this,e)}abs(){return this.select(this.negate(),this)}exp(){let e=this.get_appr(-10);if(e>2n||e<-2n){let e=this.shiftRight(1).exp();return e.multiply(e)}return new prescaled_exp_CR(this)}cos(){let e=this.divide(CR.PI).get_appr(-1);if(abs_n(e)>=2n){let t=CR.scale(e,-1n),n=CR.PI.multiply(CR.valueOfN(t));return 0n!==(1n&t)?this.subtract(n).cos().negate():this.subtract(n).cos()}if(abs_n(this.get_appr(-1))>=2n){let e=this.shiftRight(1).cos();return e.multiply(e).shiftLeft(1).subtract(CR.ONE)}return new prescaled_cos_CR(this)}sin(){return CR.half_pi.subtract(this).cos()}asin(){let e=this.get_appr(-10);if(e>750n){return CR.ONE.subtract(this.multiply(this)).sqrt().acos()}return e<-750n?this.negate().asin().negate():new prescaled_asin_CR(this)}acos(){return CR.half_pi.subtract(this.asin())}ln(){let e=this.get_appr(-4);if(e<0n)throw new ArithmeticException("ln(negative)");if(e<=8n)return this.inverse().ln().negate();if(e>=24n){if(e<=64n){return this.sqrt().sqrt().ln().shiftLeft(2)}{let t=bitLength_n(e)-3;return this.shiftRight(t).ln().add(CR.valueOfN(BigInt(t)).multiply(CR.ln2))}}return this.simple_ln()}sqrt(){return new sqrt_CR(this)}}class slow_CR extends CR{get_appr(e){if(slow_CR.check_prec(e),this.appr_valid&&e>=this.min_prec)return slow_CR.scale(this.max_appr,BigInt(this.min_prec-e));{let t=e>=-64?-64:e-32+1&-32,n=this.approximate(t);return this.min_prec=t,this.max_appr=n,this.appr_valid=!0,slow_CR.scale(n,BigInt(t-e))}}}class int_CR extends CR{constructor(e){super(),this.value=e}approximate(e){return int_CR.scale(this.value,BigInt(-e))}}class assumed_int_CR extends CR{constructor(e){super(),this.value=e}approximate(e){return e>=0?this.value.get_appr(e):assumed_int_CR.scale(this.value.get_appr(0),BigInt(-e))}}class add_CR extends CR{constructor(e,t){super(),this.op1=e,this.op2=t}approximate(e){return add_CR.scale(this.op1.get_appr(e-2)+this.op2.get_appr(e-2),-2n)}}class shifted_CR extends CR{constructor(e,t){super(),this.op=e,this.count=t}approximate(e){return this.op.get_appr(e-this.count)}}class neg_CR extends CR{constructor(e){super(),this.op=e}approximate(e){return-this.op.get_appr(e)}}class select_CR extends CR{constructor(e,t,n){super(),this.selector=e,this.selector_sign=signum_n(e.get_appr(-20)),this.op1=t,this.op2=n}approximate(e){if(this.selector_sign<0)return this.op1.get_appr(e);if(this.selector_sign>0)return this.op2.get_appr(e);let t=this.op1.get_appr(e-1),n=this.op2.get_appr(e-1);return abs_n(t-n)<=1n?select_CR.scale(t,-1n):this.selector.signum()<0?(this.selector_sign=-1,select_CR.scale(t,-1n)):(this.selector_sign=1,select_CR.scale(n,-1n))}}class mult_CR extends CR{constructor(e,t){super(),this.op1=e,this.op2=t}approximate(e){let t,n=(e>>1)-1,i=this.op1.msd(n);if(-2147483648===i){if(t=this.op2.msd(n),-2147483648===t)return 0n;{let e;e=this.op1,this.op1=this.op2,this.op2=e,i=t}}let r=e-i-3,a=this.op2.get_appr(r);if(0n===a)return 0n;t=this.op2.known_msd();let l=e-t-3,s=this.op1.get_appr(l),o=l+r-e;return mult_CR.scale(s*a,BigInt(o))}}class inv_CR extends CR{constructor(e){super(),this.op=e}approximate(e){let t=this.op.msd_get(),n=t-(1-t-e+3),i=-e-n;if(i<0)return 0n;let r=1n<<BigInt(i),a=this.op.get_appr(n),l=abs_n(a),s=(r+(l>>1n))/l;return a<0?-s:s}}class prescaled_exp_CR extends CR{constructor(e){super(),this.op=e}approximate(e){if(e>=1)return 0n;let t=2+(-e>>1),n=e-prescaled_exp_CR.bound_log2(2*t)-4,i=e-3,r=this.op.get_appr(i),a=BigInt(i),l=1n<<BigInt(-n),s=l,o=l,u=0,R=1n<<BigInt(e-4-n);for(;abs_n(s)>=R;)u=u+1^0,s=prescaled_exp_CR.scale(s*r,a),s/=BigInt(u),o+=s;return prescaled_exp_CR.scale(o,BigInt(n-e))}}class prescaled_cos_CR extends slow_CR{constructor(e){super(),this.op=e}approximate(e){if(e>=1)return 0n;let t,n,i=4+(-e>>1),r=e-prescaled_cos_CR.bound_log2(2*i)-4,a=e-2,l=this.op.get_appr(a),s=BigInt(a),o=1n<<BigInt(e-4-r);n=0,t=1n<<BigInt(-r);let u=t;for(;abs_n(t)>=o;){n+=2,t=prescaled_cos_CR.scale(t*l,s),t=prescaled_cos_CR.scale(t*l,s),t/=BigInt(-n)*BigInt(n-1),u+=t}return prescaled_cos_CR.scale(u,BigInt(r-e))}}class integral_atan_CR extends slow_CR{constructor(e){super(),this.op=e}approximate(e){if(e>=1)return 0n;let t=2+(-e>>1),n=e-integral_atan_CR.bound_log2(2*t)-2,i=1n<<BigInt(-n),r=BigInt(this.op),a=BigInt(this.op*this.op),l=i/r,s=l,o=l,u=l,R=1,d=1,c=1n<<BigInt(e-2-n);for(;abs_n(o)>=c;)d+=2,s/=a,R=-R,o=s/BigInt(R*d),u+=o;return integral_atan_CR.scale(u,BigInt(n-e))}}class prescaled_ln_CR extends slow_CR{constructor(e){super(),this.op=e}approximate(e){if(e>=0)return 0n;let t=-e,n=e-prescaled_ln_CR.bound_log2(2*t)-4,i=e-3,r=this.op.get_appr(i),a=BigInt(i),l=prescaled_ln_CR.scale(r,BigInt(i-n)),s=l,o=s,u=1,R=1,d=1n<<BigInt(e-4-n);for(;abs_n(s)>=d;)u+=1,R=-R,l=prescaled_ln_CR.scale(l*r,a),s=l/BigInt(u*R),o+=s;return prescaled_ln_CR.scale(o,BigInt(n-e))}}class prescaled_asin_CR extends slow_CR{constructor(e){super(),this.op=e}approximate(e){if(e>=2)return 0n;let t=-3*(e>>1)+4,n=e-prescaled_asin_CR.bound_log2(2*t)-4,i=e-3,r=this.op.get_appr(i),a=BigInt(i+2),l=BigInt(i-2),s=1n<<BigInt(e-4-n),o=1,u=r<<BigInt(i-n),R=u,d=u;for(;abs_n(u)>=s;){o+=2,d*=BigInt(o-2),d=prescaled_asin_CR.scale(d*r,a),d*=r,d/=BigInt(o-1),d=prescaled_asin_CR.scale(d,l),u=d/BigInt(o),R+=u}return prescaled_asin_CR.scale(R,BigInt(n-e))}}class sqrt_CR extends CR{constructor(e,t=0,n=null){super(),this.op=e,this.min_prec=t,null!==n&&(this.max_appr=n,this.appr_valid=!0)}approximate(e){let t=(e<<1)-1,n=this.op.iter_msd(t);if(n<=t)return 0n;let i=n>>1,r=i-e;if(r>50){let t=i-(6+(r>>1)),n=t<<1,a=this.op.get_appr(n),l=this.get_appr(t),s=l*l+a;return sqrt_CR.scale(s,BigInt(t-e))/l+1n>>1n}{let t=n-60&-2,i=t-60,r=this.op.get_appr(t)<<60n,a=Number(r);if(a<0)throw new ArithmeticException("sqrt(negative)");let l=Math.sqrt(a),s=BigInt(Math.floor(l)),o=(i>>1)-e;return sqrt_CR.shift(s,BigInt(o))}}}class gl_pi_CR extends slow_CR{constructor(){super(),this.b_prec=[null],this.b_val=[null]}approximate(e){if(this.b_prec.length>this.b_val.length&&this.b_prec.pop(),e>=0)return gl_pi_CR.scale(3n,BigInt(-e));const t=Math.ceil(Math.log(-e)/Math.LN2)+10^0,n=BigInt(-t),i=e-t,r=BigInt(-i);let a=1n<<r,l=gl_pi_CR.SQRT_HALF.get_appr(i),s=1n<<BigInt(-i-2),o=0;for(;a-l-4n>0n;){let t,u=a+l>>1n,R=a-u,d=a*l>>r,c=gl_pi_CR.valueOfN(d).shiftRight(-i);if(this.b_prec.length===o+1){t=c.sqrt().get_appr(i);let r=gl_pi_CR.scale(t,n);this.b_prec.push(e),this.b_val.push(r)}else{t=new sqrt_CR(c,this.b_prec[o+1],this.b_val[o+1]).get_appr(i),this.b_prec[o+1]=e,this.b_val[o+1]=gl_pi_CR.scale(t,n)}a=u,l=t,s=s-(R*R<<BigInt(o+i)),++o}let u=a+l,R=u*u/s>>2n;return gl_pi_CR.scale(R,n)}}CR.ZERO=CR.valueOfN(0n),CR.ONE=CR.valueOfN(1n),CR.ten_ninths=CR.valueOfN(10n).divide(CR.valueOfN(9n)),CR.twentyfive_twentyfourths=CR.valueOfN(25n).divide(CR.valueOfN(24n)),CR.eightyone_eightyeths=CR.valueOfN(81n).divide(CR.valueOfN(80n)),CR.ln2_1=CR.valueOfN(7n).multiply(CR.ten_ninths.simple_ln()),CR.ln2_2=CR.valueOfN(2n).multiply(CR.twentyfive_twentyfourths.simple_ln()),CR.ln2_3=CR.valueOfN(3n).multiply(CR.eightyone_eightyeths.simple_ln()),CR.ln2=CR.ln2_1.subtract(CR.ln2_2).add(CR.ln2_3),CR.SQRT_HALF=new sqrt_CR(CR.ONE.shiftRight(1)),CR.four=CR.valueOfN(4n),CR.PI=new gl_pi_CR,CR.atan_PI=CR.four.multiply(CR.four.multiply(CR.atan_reciprocal(5)).subtract(CR.atan_reciprocal(239))),CR.half_pi=CR.PI.shiftRight(1);class UnaryCRFunction{}class sin_UnaryCRFunction extends UnaryCRFunction{execute(e){return e.sin()}}class cos_UnaryCRFunction extends UnaryCRFunction{execute(e){return e.cos()}}class tan_UnaryCRFunction extends UnaryCRFunction{execute(e){return e.sin().divide(e.cos())}}class asin_UnaryCRFunction extends UnaryCRFunction{execute(e){return e.asin()}}class acos_UnaryCRFunction extends UnaryCRFunction{execute(e){return e.acos()}}class atan_UnaryCRFunction extends UnaryCRFunction{constructor(){super(...arguments),this.one=CR.ONE}execute(e){let t=e.multiply(e),n=t.divide(this.one.add(t)).sqrt();return e.select(n.negate(),n).asin()}}const UnaryCRFunctions=Object.freeze({sinFunction:new sin_UnaryCRFunction,cosFunction:new cos_UnaryCRFunction,tanFunction:new tan_UnaryCRFunction,asinFunction:new asin_UnaryCRFunction,acosFunction:new acos_UnaryCRFunction,atanFunction:new atan_UnaryCRFunction});class BoundedRational{constructor(e,t=1n){this.mNum=e,this.mDen=t}static valueOfS(e,t){if(void 0===t&&(t=10),2!==t&&8!==t&&10!==t&&16!==t)throw new NumberFormatException("Radix: "+t);let n,i,r=e.length,a=0;for(;" "===e.charAt(a);)++a;for(;" "===e.charAt(r-1);)--r;n=e.indexOf(".",a),-1===n?(n=r,i=""):i=e.substring(n+1,r);let l,s=e.substring(a,n);switch(t){case 2:l=BigInt("0b"+s+i);break;case 8:l=BigInt("0o"+s+i);break;case 10:l=BigInt(s+i);break;case 16:l=BigInt("0x"+s+i)}let o=BigInt(t)**BigInt(i.length);return new BoundedRational(l,o)}toString(){return this.mNum.toString()+"/"+this.mDen.toString()}toNiceString(){let e=this.reduce().positiveDen(),t=e.mNum.toString();return 1n!==e.mDen&&(t+="/"+e.mDen),t}static toString(e){return null===e?"not a small rational":e.toString()}toStringTruncated(e){let t=(abs_n(this.mNum)*10n**BigInt(e)/abs_n(this.mDen)).toString(),n=t.length;return n<e+1&&(t="0".repeat(e+1-n)+t,n=e+1),(this.signum()<0?"-":"")+t.substring(0,n-e)+"."+t.substring(n-e)}crValue(){return CR.valueOfN(this.mNum).divide(CR.valueOfN(this.mDen))}intValue(){let e=this.reduce();if(1n!==e.mDen)throw new ArithmeticException("intValue of non-int");return Number(e.mNum)}wholeNumberBits(){return 0n===this.mNum?-2147483648:bitLength_n(this.mNum)-bitLength_n(this.mDen)}tooBig(){return 1n!==this.mDen&&bitLength_n(this.mNum)+bitLength_n(this.mDen)>1e4}positiveDen(){return this.mDen>0n?this:new BoundedRational(-this.mNum,-this.mDen)}reduce(){if(1n===this.mDen)return this;let e=gcd_n(this.mNum,this.mDen);return new BoundedRational(this.mNum/e,this.mDen/e)}static maybeReduce(e){if(null===e)return null;if(!e.tooBig()&&Math.random()<1/16)return e;let t=e.positiveDen();return t=t.reduce(),t.tooBig()?null:t}compareTo(e){return compare_n(this.mNum*e.mDen,e.mNum*this.mDen)*signum_n(this.mDen)*signum_n(e.mDen)}signum(){return signum_n(this.mNum)*signum_n(this.mDen)}equals(e){return null!==e&&0===this.compareTo(e)}static asBigInteger(e){return null===e?null:e.mNum%e.mDen===0n?e.mNum/e.mDen:null}static add(e,t){if(null===e||null===t)return null;let n=e.mDen*t.mDen,i=e.mNum*t.mDen+t.mNum*e.mDen;return BoundedRational.maybeReduce(new BoundedRational(i,n))}static negate(e){return null===e?null:new BoundedRational(-e.mNum,e.mDen)}static subtract(e,t){return BoundedRational.add(e,BoundedRational.negate(t))}static rawMultiply(e,t){if(null===e||null===t)return null;if(e===BoundedRational.ONE)return t;if(t===BoundedRational.ONE)return e;let n=e.mNum*t.mNum,i=e.mDen*t.mDen;return new BoundedRational(n,i)}static multiply(e,t){return BoundedRational.maybeReduce(BoundedRational.rawMultiply(e,t))}static inverse(e){if(null===e)return null;if(0n===e.mNum)throw new ZeroDivisionException;return new BoundedRational(e.mDen,e.mNum)}static divide(e,t){return BoundedRational.multiply(e,BoundedRational.inverse(t))}static sqrt(e){if(null===e)return null;if((e=e.positiveDen().reduce()).mNum<0n)throw new ArithmeticException("sqrt(negative)");let t=Math.round(Math.sqrt(Number(e.mNum)));if(t===1/0)return null;let n=BigInt(t);if(n*n!==e.mNum)return null;let i=Math.round(Math.sqrt(Number(e.mDen)));if(i===1/0)return null;let r=BigInt(i);return r*r!==e.mDen?null:new BoundedRational(n,r)}rawPow(e){if(1n===e)return this;if(1n===(1n&e))return BoundedRational.rawMultiply(this.rawPow(e-1n),this);if(0n===e)return BoundedRational.ONE;let t=this.rawPow(e>>1n),n=BoundedRational.rawMultiply(t,t);return null===n||n.tooBig()?null:n}pow(e){let t=signum_n(e);if(0===t)return BoundedRational.ONE;if(1n===e)return this;let n=this.reduce().positiveDen();if(1n===n.mDen){if(0n===n.mNum)return BoundedRational.ZERO;if(1n===n.mNum)return BoundedRational.ONE;if(-1n===n.mNum)return 1n===(1n&e)?BoundedRational.MINUS_ONE:BoundedRational.ONE}return bitLength_n(e)>1e3?null:t<0?BoundedRational.inverse(n).rawPow(-e):n.rawPow(e)}static pow(e,t){return null===t||null===e||1n!==(t=t.reduce().positiveDen()).mDen?null:e.pow(t.mNum)}static digitsRequired(e){if(null===e)return 2147483647;let t=0,n=0;if(1n===e.mDen)return 0;let i=(e=e.reduce()).mDen;if(bitLength_n(i)>1e4)return 2147483647;for(;0n===(1n&i);)++t,i>>=1n;for(;i%5n===0n;)++n,i/=5n;return 1n!==i&&-1n!==i?1e4:Math.max(t,n)}}BoundedRational.ZERO=new BoundedRational(0n),BoundedRational.HALF=new BoundedRational(1n,2n),BoundedRational.MINUS_HALF=new BoundedRational(-1n,2n),BoundedRational.THIRD=new BoundedRational(1n,3n),BoundedRational.QUARTER=new BoundedRational(1n,4n),BoundedRational.SIXTH=new BoundedRational(1n,6n),BoundedRational.ONE=new BoundedRational(1n),BoundedRational.MINUS_ONE=new BoundedRational(-1n),BoundedRational.TWO=new BoundedRational(2n),BoundedRational.MINUS_TWO=new BoundedRational(-2n),BoundedRational.TEN=new BoundedRational(10n),BoundedRational.TWELVE=new BoundedRational(12n);class UnifiedReal{static check(e){if(!e)throw new AssertionError}constructor(e,t){if(null===e)throw new ArithmeticException("Building UnifiedReal from null");this.mCrFactor=t,this.mRatFactor=e}static newCR(e){return new UnifiedReal(BoundedRational.ONE,e)}static newBR(e){return new UnifiedReal(e,UnifiedReal.CR_ONE)}static newN(e){return UnifiedReal.newBR(new BoundedRational(e))}static getSquare(e){const t=UnifiedReal.sSqrts;for(let n=0;n<t.length;++n)if(t[n]===e)return new BoundedRational(BigInt(n));return null}getExp(e){const t=UnifiedReal.sLogs;for(let n=0;n<t.length;++n)if(t[n]===e)return new BoundedRational(BigInt(n));return null}static crName(e){if(e===UnifiedReal.CR_ONE)return"";if(e===UnifiedReal.CR_PI)return"π";if(e===UnifiedReal.CR_E)return"e";const t=UnifiedReal.sSqrts;for(let n=0;n<t.length;++n)if(e===t[n])return"√"+n;const n=UnifiedReal.sLogs;for(let t=0;t<n.length;++t)if(e===n[t])return"ln("+t+")";return null}static isNamed(e){if(e===UnifiedReal.CR_ONE||e===UnifiedReal.CR_PI||e===UnifiedReal.CR_E)return!0;const t=UnifiedReal.sSqrts;for(let n=0;n<t.length;++n)if(e===t[n])return!0;const n=UnifiedReal.sLogs;for(let t=0;t<n.length;++t)if(e===n[t])return!0;return!1}static definitelyAlgebraic(e){return e===UnifiedReal.CR_ONE||null!==UnifiedReal.getSquare(e)}definitelyRational(){return this.mCrFactor===UnifiedReal.CR_ONE||0===this.mRatFactor.signum()}definitelyIrrational(){return!this.definitelyRational()&&UnifiedReal.isNamed(this.mCrFactor)}definitelyAlgebraic(){return UnifiedReal.definitelyAlgebraic(this.mCrFactor)||0===this.mRatFactor.signum()}definitelyTranscendental(){return!this.definitelyAlgebraic()&&UnifiedReal.isNamed(this.mCrFactor)}static definitelyIndependent(e,t){return e!==t&&(e===UnifiedReal.CR_E||e===UnifiedReal.CR_PI?UnifiedReal.definitelyAlgebraic(t):t===UnifiedReal.CR_E||t===UnifiedReal.CR_PI?UnifiedReal.definitelyAlgebraic(e):UnifiedReal.isNamed(e)&&UnifiedReal.isNamed(t))}toString(){return this.mRatFactor.toString()+"*"+this.mCrFactor.toString()}toNiceString(){if(this.mCrFactor===UnifiedReal.CR_ONE||0===this.mRatFactor.signum())return this.mRatFactor.toNiceString();let e=UnifiedReal.crName(this.mCrFactor);if(null!==e){let t=BoundedRational.asBigInteger(this.mRatFactor);return null!==t?1n===t?e:this.mRatFactor.toNiceString()+e:"("+this.mRatFactor.toNiceString()+")"+e}return this.mRatFactor===BoundedRational.ONE?this.mCrFactor.toString():this.crValue().toString()}exactlyDisplayable(){return null!==UnifiedReal.crName(this.mCrFactor)}toStringTruncated(e){if(this.mCrFactor===UnifiedReal.CR_ONE||this.mRatFactor===BoundedRational.ZERO)return this.mRatFactor.toStringTruncated(e);const t=CR.valueOfN(10n**BigInt(e)).multiply(this.crValue());let n,i=!1;this.exactlyTruncatable()?(n=t.get_appr(0),n<0n&&(i=!0,n=-n),CR.valueOfN(n).compareTo(t.abs())>0&&(n-=1n),UnifiedReal.check(CR.valueOfN(n).compareTo(t.abs())<0)):(n=t.get_appr(-UnifiedReal.EXTRA_PREC),n<0n&&(i=!0,n=-n),n>>=UnifiedReal.EXTRA_PREC_BIG);let r=n.toString(),a=r.length;return a<e+1&&(r="0".repeat(e+1-a)+r,a=e+1),(i?"-":"")+r.substring(0,a-e)+"."+r.substring(a-e)}exactlyTruncatable(){return this.mCrFactor===UnifiedReal.CR_ONE||this.mRatFactor===BoundedRational.ZERO||this.definitelyIrrational()}crValue(){return this.mRatFactor.crValue().multiply(this.mCrFactor)}isComparable(e){return this.mCrFactor===e.mCrFactor&&(UnifiedReal.isNamed(this.mCrFactor)||0!==this.mCrFactor.signumA(-1e3))||0===this.mRatFactor.signum()&&0===e.mRatFactor.signum()||UnifiedReal.definitelyIndependent(this.mCrFactor,e.mCrFactor)||0!==this.crValue().compareToA(e.crValue(),-1e3)}compareTo(e){if(this.definitelyZero()&&e.definitelyZero())return 0;if(this.mCrFactor===e.mCrFactor){return this.mCrFactor.signum()*this.mRatFactor.compareTo(e.mRatFactor)}return this.crValue().compareTo(e.crValue())}compareToA(e,t){return this.isComparable(e)?this.compareTo(e):this.crValue().compareToA(e.crValue(),t)}signumA(e){return this.compareToA(UnifiedReal.ZERO,e)}signum(){return this.compareTo(UnifiedReal.ZERO)}approxEquals(e,t){return this.isComparable(e)?(!UnifiedReal.definitelyIndependent(this.mCrFactor,e.mCrFactor)||0===this.mRatFactor.signum()&&0===e.mRatFactor.signum())&&0===this.compareTo(e):0===this.crValue().compareToA(e.crValue(),t)}definitelyEquals(e){return this.isComparable(e)&&0===this.compareTo(e)}definitelyNotEquals(e){let t=UnifiedReal.isNamed(this.mCrFactor),n=UnifiedReal.isNamed(e.mCrFactor);return t&&n?UnifiedReal.definitelyIndependent(this.mCrFactor,e.mCrFactor)?0!==this.mRatFactor.signum()||0!==e.mRatFactor.signum():(this.mCrFactor,e.mCrFactor,!this.mRatFactor.equals(e.mRatFactor)):0===this.mRatFactor.signum()?n&&0!==e.mRatFactor.signum():0===e.mRatFactor.signum()&&(t&&0!==this.mRatFactor.signum())}definitelyZero(){return 0===this.mRatFactor.signum()}definitelyNonZero(){return UnifiedReal.isNamed(this.mCrFactor)&&0!==this.mRatFactor.signum()}definitelyOne(){return this.mCrFactor===UnifiedReal.CR_ONE&&this.mRatFactor.equals(BoundedRational.ONE)}boundedRationalValue(){return this.mCrFactor===UnifiedReal.CR_ONE||0===this.mRatFactor.signum()?this.mRatFactor:null}bigIntegerValue(){let e=this.boundedRationalValue();return BoundedRational.asBigInteger(e)}add(e){if(this.mCrFactor===e.mCrFactor){let t=BoundedRational.add(this.mRatFactor,e.mRatFactor);if(null!==t)return new UnifiedReal(t,this.mCrFactor)}return this.definitelyZero()?e:e.definitelyZero()?this:UnifiedReal.newCR(this.crValue().add(e.crValue()))}negate(){return new UnifiedReal(BoundedRational.negate(this.mRatFactor),this.mCrFactor)}subtract(e){return this.add(e.negate())}multiply(e){if(this.mCrFactor===UnifiedReal.CR_ONE){let t=BoundedRational.multiply(this.mRatFactor,e.mRatFactor);if(null!==t)return new UnifiedReal(t,e.mCrFactor)}if(e.mCrFactor===UnifiedReal.CR_ONE){let t=BoundedRational.multiply(this.mRatFactor,e.mRatFactor);if(null!==t)return new UnifiedReal(t,this.mCrFactor)}if(this.definitelyZero()||e.definitelyZero())return UnifiedReal.ZERO;if(this.mCrFactor===e.mCrFactor){let t=UnifiedReal.getSquare(this.mCrFactor);if(null!==t){let n=BoundedRational.multiply(BoundedRational.multiply(t,this.mRatFactor),e.mRatFactor);if(null!==n)return UnifiedReal.newBR(n)}}let t=BoundedRational.multiply(this.mRatFactor,e.mRatFactor);return null!==t?new UnifiedReal(t,this.mCrFactor.multiply(e.mCrFactor)):UnifiedReal.newCR(this.crValue().multiply(e.crValue()))}inverse(){if(this.definitelyZero())throw new ZeroDivisionException;let e=UnifiedReal.getSquare(this.mCrFactor);if(null!==e){let t=BoundedRational.inverse(BoundedRational.multiply(this.mRatFactor,e));if(null!==t)return new UnifiedReal(t,this.mCrFactor)}return new UnifiedReal(BoundedRational.inverse(this.mRatFactor),this.mCrFactor.inverse())}divide(e){if(this.mCrFactor===e.mCrFactor){if(e.definitelyZero())throw new ZeroDivisionException;let t=BoundedRational.divide(this.mRatFactor,e.mRatFactor);if(null!==t)return new UnifiedReal(t,UnifiedReal.CR_ONE)}return this.multiply(e.inverse())}sqrt(){if(this.definitelyZero())return UnifiedReal.ZERO;if(this.mCrFactor===UnifiedReal.CR_ONE){let e;for(let t=1;t<UnifiedReal.sSqrts.length;++t)if(null!==UnifiedReal.sSqrts[t]&&(e=BoundedRational.sqrt(BoundedRational.divide(this.mRatFactor,new BoundedRational(BigInt(t)))),null!==e))return new UnifiedReal(e,UnifiedReal.sSqrts[t])}return UnifiedReal.newCR(this.crValue().sqrt())}getPiTwelfths(){if(this.definitelyZero())return 0n;if(this.mCrFactor===UnifiedReal.CR_PI){let e=BoundedRational.asBigInteger(BoundedRational.multiply(this.mRatFactor,BoundedRational.TWELVE));return null===e?null:e%24n}return null}static sinPiTwelfths(e){if(e>=12){let t=UnifiedReal.sinPiTwelfths(e-12);return null===t?null:t.negate()}switch(e){case 0:return UnifiedReal.ZERO;case 2:case 10:return UnifiedReal.HALF;case 3:case 9:return UnifiedReal.HALF_SQRT2;case 4:case 8:return UnifiedReal.HALF_SQRT3;case 6:return UnifiedReal.ONE;default:return null}}sin(){let e=this.getPiTwelfths();if(null!==e){let t=UnifiedReal.sinPiTwelfths(Number(e));if(null!==t)return t}return UnifiedReal.newCR(this.crValue().sin())}static cosPiTwelfths(e){let t=e+6;return t>=24&&(t-=24),UnifiedReal.sinPiTwelfths(t)}cos(){let e=this.getPiTwelfths();if(null!==e){let t=UnifiedReal.cosPiTwelfths(Number(e));if(null!==t)return t}return UnifiedReal.newCR(this.crValue().cos())}tan(){let e=this.getPiTwelfths();if(null!==e){let t=Number(e);if(6===t||18===t)throw new ArithmeticException("Tangent undefined");let n=UnifiedReal.sinPiTwelfths(t),i=UnifiedReal.cosPiTwelfths(t);if(null!==n&&null!==i)return n.divide(i)}return this.sin().divide(this.cos())}checkAsinDomain(){if(this.isComparable(UnifiedReal.ONE)&&(this.compareTo(UnifiedReal.ONE)>0||this.compareTo(UnifiedReal.MINUS_ONE)<0))throw new ArithmeticException("inverse trig argument out of range")}static asinHalves(e){if(e<0)return this.asinHalves(-e).negate();switch(e){case 0:return UnifiedReal.ZERO;case 1:return new UnifiedReal(BoundedRational.SIXTH,CR.PI);case 2:return new UnifiedReal(BoundedRational.HALF,CR.PI)}throw new AssertionError("asinHalves: Bad argument")}asinNonHalves(){return this.compareToA(UnifiedReal.ZERO,-10)<0?this.negate().asinNonHalves().negate():this.definitelyEquals(UnifiedReal.HALF_SQRT2)?new UnifiedReal(BoundedRational.QUARTER,UnifiedReal.CR_PI):this.definitelyEquals(UnifiedReal.HALF_SQRT3)?new UnifiedReal(BoundedRational.THIRD,UnifiedReal.CR_PI):UnifiedReal.newCR(this.crValue().asin())}asin(){this.checkAsinDomain();const e=this.multiply(UnifiedReal.TWO).bigIntegerValue();return null!==e?UnifiedReal.asinHalves(Number(e)):this.mCrFactor===CR.ONE||this.mCrFactor!==UnifiedReal.CR_SQRT2||this.mCrFactor!==UnifiedReal.CR_SQRT3?this.asinNonHalves():UnifiedReal.newCR(this.crValue().asin())}acos(){return UnifiedReal.PI_OVER_2.subtract(this.asin())}atan(){if(this.compareToA(UnifiedReal.ZERO,-10)<0)return this.negate().atan().negate();const e=this.bigIntegerValue();if(null!==e&&e<=1n){switch(Number(e)){case 0:return UnifiedReal.ZERO;case 1:return UnifiedReal.PI_OVER_4;default:throw new AssertionError("Impossible r_int")}}return this.definitelyEquals(UnifiedReal.THIRD_SQRT3)?UnifiedReal.PI_OVER_6:this.definitelyEquals(UnifiedReal.SQRT3)?UnifiedReal.PI_OVER_3:UnifiedReal.newCR(UnaryCRFunctions.atanFunction.execute(this.crValue()))}static recursivePow(e,t){if(1n===t)return e;if(0n!==(1n&t))return e.multiply(UnifiedReal.recursivePow(e,t-1n));let n=UnifiedReal.recursivePow(e,t>>1n);return n.multiply(n)}expLnPow(e){let t=this.signumA(-1e3);if(t>0)return UnifiedReal.newCR(this.crValue().ln().multiply(CR.valueOfN(e)).exp());if(t<0){let t=this.crValue().negate().ln().multiply(CR.valueOfN(e)).exp();return 0n!==(1n&e)&&(t=t.negate()),UnifiedReal.newCR(t)}return e<0n?UnifiedReal.newCR(UnifiedReal.recursivePow(this.crValue(),-e).inverse()):UnifiedReal.newCR(UnifiedReal.recursivePow(this.crValue(),e))}powN(e){if(1n===e)return this;if(0n===e)return UnifiedReal.ONE;let t=abs_n(e);if(this.mCrFactor===UnifiedReal.CR_ONE&&t<=UnifiedReal.HARD_RECURSIVE_POW_LIMIT){const t=this.mRatFactor.pow(e);if(null!==t)return UnifiedReal.newBR(t)}if(t>UnifiedReal.RECURSIVE_POW_LIMIT)return this.expLnPow(e);let n=UnifiedReal.getSquare(this.mCrFactor);if(null!==n){const t=BoundedRational.multiply(this.mRatFactor.pow(e),n.pow(e>>1n));if(null!==t)return 1n===(1n&e)?new UnifiedReal(t,this.mCrFactor):UnifiedReal.newBR(t)}return this.expLnPow(e)}pow(e){if(this.mCrFactor===UnifiedReal.CR_E){if(this.mRatFactor.equals(BoundedRational.ONE))return e.exp();{let t=UnifiedReal.newBR(this.mRatFactor).pow(e);return e.exp().multiply(t)}}const t=e.boundedRationalValue();if(null!==t){let e=BoundedRational.asBigInteger(t);if(null!==e)return this.powN(e);if(e=BoundedRational.asBigInteger(BoundedRational.multiply(BoundedRational.TWO,t)),null!==e)return this.powN(e).sqrt()}if(this.definitelyZero())return UnifiedReal.ZERO;if(this.signumA(-1e3)<0)throw new ArithmeticException("Negative base for pow() with non-integer exponent");return UnifiedReal.newCR(this.crValue().ln().multiply(e.crValue()).exp())}static pow16(e){if(e>10)throw new AssertionError("Unexpected pow16 argument");let t=BigInt(e);return t*=t,t*=t,t*=t,t*=t,t}static getIntLog(e,t){let n=Number(e),i=Math.log(n)/Math.log(t);if(isFinite(n)&&Math.abs(i-Math.round(i))>1e-6)return 0n;let r=0n,a=BigInt(t),l=null;for(;e%a===0n;)for(e/=a,++r,null===l&&(l=UnifiedReal.pow16(t));e%l===0n;)e/=l,r+=16n;return 1n===e?r:0n}ln(){if(this.mCrFactor===UnifiedReal.CR_E)return new UnifiedReal(this.mRatFactor,UnifiedReal.CR_ONE).ln().add(UnifiedReal.ONE);if(this.isComparable(UnifiedReal.ZERO)){if(this.signum()<=0)throw new ArithmeticException("log(non-positive)");let e=this.compareToA(UnifiedReal.ONE,-1e3);if(0===e){if(this.definitelyEquals(UnifiedReal.ONE))return UnifiedReal.ZERO}else if(e<0)return this.inverse().ln().negate();const t=BoundedRational.asBigInteger(this.mRatFactor);if(null!==t)if(this.mCrFactor===UnifiedReal.CR_ONE){const e=UnifiedReal.sLogs;for(let n=0;n<e.length;++n)if(null!==e[n]){let i=UnifiedReal.getIntLog(t,n);if(0n!==i)return new UnifiedReal(new BoundedRational(i),e[n])}}else{let e=UnifiedReal.getSquare(this.mCrFactor);if(null!==e){let n=e.intValue();const i=UnifiedReal.sLogs;if(null!==i[n]){let e=UnifiedReal.getIntLog(t,n);if(0n!==e){let t=BoundedRational.add(new BoundedRational(e),BoundedRational.HALF);if(null!==t)return new UnifiedReal(t,i[n])}}}}}return UnifiedReal.newCR(this.crValue().ln())}exp(){if(this.definitelyEquals(UnifiedReal.ZERO))return UnifiedReal.ONE;if(this.definitelyEquals(UnifiedReal.ONE))return UnifiedReal.E;const e=this.getExp(this.mCrFactor);if(null!==e){let t=!1,n=this.mRatFactor;null===BoundedRational.asBigInteger(n)&&(t=!0,n=BoundedRational.multiply(n,BoundedRational.TWO));let i=BoundedRational.pow(e,n);if(null!==i){let e=UnifiedReal.newBR(i);return t&&(e=e.sqrt()),e}}return UnifiedReal.newCR(this.crValue().exp())}static genFactorial(e,t){if(e>4n*t){return UnifiedReal.genFactorial(e,2n*t)*UnifiedReal.genFactorial(e-t,2n*t)}{if(0n===e)return 1n;let n=e;for(let i=e-t;i>1n;i-=t)n*=i;return n}}fact(){let e=this.bigIntegerValue();if(null===e&&(e=this.crValue().get_appr(0),!this.approxEquals(UnifiedReal.newN(e),-1e3)))throw new ArithmeticException("Non-integral factorial argument");if(e<0n)throw new ArithmeticException("Negative factorial argument");if(bitLength_n(e)>20)throw new ArithmeticException("Factorial argument too big");let t=UnifiedReal.genFactorial(e,1n),n=new BoundedRational(t);return UnifiedReal.newBR(n)}digitsRequired(){return this.mCrFactor===UnifiedReal.CR_ONE||0===this.mRatFactor.signum()?BoundedRational.digitsRequired(this.mRatFactor):2147483647}leadingBinaryZeroes(){if(UnifiedReal.isNamed(this.mCrFactor)){const e=this.mRatFactor.wholeNumberBits();return-2147483648===e?2147483647:e>=3?0:3-e}return 2147483647}approxWholeNumberBitsGreaterThan(e){return UnifiedReal.isNamed(this.mCrFactor)?this.mRatFactor.wholeNumberBits()>e:bitLength_n(this.crValue().get_appr(e-2))>2}}UnifiedReal.CR_ONE=CR.ONE,UnifiedReal.CR_PI=CR.PI,UnifiedReal.CR_E=CR.ONE.exp(),UnifiedReal.CR_SQRT2=CR.valueOfN(2n).sqrt(),UnifiedReal.CR_SQRT3=CR.valueOfN(3n).sqrt(),UnifiedReal.CR_LN2=CR.valueOfN(2n).ln(),UnifiedReal.CR_LN3=CR.valueOfN(3n).ln(),UnifiedReal.CR_LN5=CR.valueOfN(5n).ln(),UnifiedReal.CR_LN6=CR.valueOfN(6n).ln(),UnifiedReal.CR_LN7=CR.valueOfN(7n).ln(),UnifiedReal.CR_LN10=CR.valueOfN(10n).ln(),UnifiedReal.sSqrts=Object.freeze([null,CR.ONE,UnifiedReal.CR_SQRT2,UnifiedReal.CR_SQRT3,null,CR.valueOfN(5n).sqrt(),CR.valueOfN(6n).sqrt(),CR.valueOfN(7n).sqrt(),null,null,CR.valueOfN(10n).sqrt()]),UnifiedReal.sLogs=Object.freeze([null,null,UnifiedReal.CR_LN2,UnifiedReal.CR_LN3,null,UnifiedReal.CR_LN5,UnifiedReal.CR_LN6,UnifiedReal.CR_LN7,null,null,UnifiedReal.CR_LN10]),UnifiedReal.PI=UnifiedReal.newCR(UnifiedReal.CR_PI),UnifiedReal.E=UnifiedReal.newCR(UnifiedReal.CR_E),UnifiedReal.ZERO=UnifiedReal.newBR(BoundedRational.ZERO),UnifiedReal.ONE=UnifiedReal.newBR(BoundedRational.ONE),UnifiedReal.MINUS_ONE=UnifiedReal.newBR(BoundedRational.MINUS_ONE),UnifiedReal.TWO=UnifiedReal.newBR(BoundedRational.TWO),UnifiedReal.MINUS_TWO=UnifiedReal.newBR(BoundedRational.MINUS_TWO),UnifiedReal.HALF=UnifiedReal.newBR(BoundedRational.HALF),UnifiedReal.MINUS_HALF=UnifiedReal.newBR(BoundedRational.MINUS_HALF),UnifiedReal.TEN=UnifiedReal.newBR(BoundedRational.TEN),UnifiedReal.RADIANS_PER_DEGREE=new UnifiedReal(new BoundedRational(1n,180n),UnifiedReal.CR_PI),UnifiedReal.SIX=UnifiedReal.newN(6n),UnifiedReal.HALF_SQRT2=new UnifiedReal(BoundedRational.HALF,UnifiedReal.CR_SQRT2),UnifiedReal.SQRT3=UnifiedReal.newCR(UnifiedReal.CR_SQRT3),UnifiedReal.HALF_SQRT3=new UnifiedReal(BoundedRational.HALF,UnifiedReal.CR_SQRT3),UnifiedReal.THIRD_SQRT3=new UnifiedReal(BoundedRational.THIRD,UnifiedReal.CR_SQRT3),UnifiedReal.PI_OVER_2=new UnifiedReal(BoundedRational.HALF,UnifiedReal.CR_PI),UnifiedReal.PI_OVER_3=new UnifiedReal(BoundedRational.THIRD,UnifiedReal.CR_PI),UnifiedReal.PI_OVER_4=new UnifiedReal(BoundedRational.QUARTER,UnifiedReal.CR_PI),UnifiedReal.PI_OVER_6=new UnifiedReal(BoundedRational.SIXTH,UnifiedReal.CR_PI),UnifiedReal.EXTRA_PREC=10,UnifiedReal.EXTRA_PREC_BIG=10n,UnifiedReal.RECURSIVE_POW_LIMIT=1000n,UnifiedReal.HARD_RECURSIVE_POW_LIMIT=1n<<1000n,"undefined"!=typeof module&&(module.exports={CR:CR,BoundedRational:BoundedRational,UnifiedReal:UnifiedReal,UnaryCRFunction:UnaryCRFunction,UnaryCRFunctions:UnaryCRFunctions});